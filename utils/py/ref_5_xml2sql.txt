#!/usr/bin/env python3

import sys
import os
import argparse
import sqlite3
import json  # Add this import
from pathlib import Path
import xml.etree.ElementTree as ET
from typing import Dict
from datetime import datetime

def setup_argument_parser():
    parser = argparse.ArgumentParser(
        description='Convert IP-XACT XML header to SQLite database'
    )
    parser.add_argument(
        '-i', '--input',
        help='Input XML file path',
        required=True,
        type=str
    )
    parser.add_argument(
        '-d', '--database',
        help='SQLite database path (defaults to current directory)',
        type=str,
        default=os.getcwd()
    )
    return parser

def validate_input_file(file_path):
    if not os.path.exists(file_path):
        raise FileNotFoundError(f"Input file not found: {file_path}")
    if not file_path.lower().endswith('.xml'):
        raise ValueError(f"Input file must be an XML file: {file_path}")

def get_database_path(args):
    input_file = Path(args.input)
    db_path = Path(args.database)
    
    # If database argument is just a directory, use input filename
    if db_path.is_dir():
        db_name = input_file.stem + '.db'
        db_path = db_path / db_name
    
    return db_path

def get_xml_version(xml_file: str) -> Dict[str, str]:
    """Extract XML version and encoding from file."""
    try:
        with open(xml_file, 'r', encoding='utf-8') as f:
            first_line = f.readline().strip()
        
        if first_line.startswith('<?xml'):
            version = first_line.split('version="')[1].split('"')[0]
            encoding = first_line.split('encoding="')[1].split('"')[0]
        else:
            version = "1.0"
            encoding = "UTF-8"
            
        return {
            'version': version,
            'encoding': encoding
        }
    except Exception as e:
        raise ValueError(f"Failed to extract XML version info: {e}")

def create_header_table(cursor: sqlite3.Cursor):
    """Create the header table if it doesn't exist."""
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS ipxact_header (
            id INTEGER PRIMARY KEY,
            xml_version TEXT NOT NULL,
            xml_encoding TEXT NOT NULL,
            schema_version TEXT NOT NULL,
            vendor TEXT NOT NULL,
            library TEXT NOT NULL,
            name TEXT NOT NULL,
            version TEXT NOT NULL,
            description TEXT,
            created_date TEXT NOT NULL,
            UNIQUE(
                xml_version, xml_encoding, schema_version,
                vendor, library, name, version, description
            )
        )
    ''')

def create_register_table(cursor: sqlite3.Cursor):
    """Create the registers table if it doesn't exist."""
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS registers (
            id INTEGER PRIMARY KEY,
            memory_map_name TEXT,
            memory_map_description TEXT,
            block_name TEXT,
            block_base_address TEXT,
            block_range TEXT,
            block_width INTEGER,
            block_usage TEXT,
            register_name TEXT,
            register_offset TEXT,
            register_size INTEGER,
            register_description TEXT,
            register_access TEXT,
            register_reset_value TEXT,
            register_reset_mask TEXT,
            register_fields TEXT,              -- JSON string containing field dictionaries
            hdl_path TEXT,
            created_date TEXT,
            UNIQUE(memory_map_name, block_name, register_name, register_offset),
            FOREIGN KEY (memory_map_name) REFERENCES ipxact_header(name)
        )
    ''')

def parse_ipxact_header(xml_file: str) -> Dict[str, str]:
    """Parse IP-XACT header information from XML file."""
    try:
        xml_info = get_xml_version(xml_file)
        
        tree = ET.parse(xml_file)
        root = tree.getroot()
        
        # Extract namespace from root tag and verify it's an IP-XACT component
        if not root.tag.endswith('}component'):
            raise ValueError("Root element is not an IP-XACT component")
            
        ns = {'ipxact': root.tag.split('}')[0].strip('{')}
        
        # Debug output
        print(f"\nDebug: XML Structure:")
        print(f"Root tag: {root.tag}")
        print(f"Namespace: {ns['ipxact']}")
        print(f"Available child elements: {[child.tag for child in root]}")
        
        # Helper function to safely get element text
        def get_element_text(element_path: str) -> str:
            element = root.find(element_path, ns)
            return element.text.strip() if element is not None and element.text is not None else ''
        
        # Get component information directly from root since it is the component
        header = {
            'xml_version': xml_info['version'],
            'xml_encoding': xml_info['encoding'],
            'schema_version': ns.get('ipxact', ''),
            'vendor': get_element_text('./ipxact:vendor'),
            'library': get_element_text('./ipxact:library'),
            'name': get_element_text('./ipxact:name'),
            'version': get_element_text('./ipxact:version'),
            'description': get_element_text('./ipxact:description'),
            'created_date': datetime.now().isoformat()
        }
        
        # Debug output
        print("\nDebug: IP-XACT Component Information:")
        print(f"Vendor: {header['vendor']}")
        print(f"Library: {header['library']}")
        print(f"Name: {header['name']}")
        print(f"Version: {header['version']}")
        
        # Validate required fields
        if not header['vendor'] or not header['library'] or not header['name']:
            raise ValueError("Missing required IP-XACT header fields (vendor, library, or name)")
            
        return header
        
    except ET.ParseError as e:
        raise ValueError(f"Invalid XML file: {e}")
    except Exception as e:
        raise ValueError(f"Failed to parse IP-XACT header: {str(e)}")

def parse_register_info(xml_file: str) -> list:
    """Parse register information from IP-XACT XML file."""
    try:
        tree = ET.parse(xml_file)
        root = tree.getroot()
        
        ns = {'ipxact': root.tag.split('}')[0].strip('{')}
        registers_info = []

        def safe_get_text(element, xpath: str, default: str = '') -> str:
            """Safely get text from an XML element."""
            try:
                elem = element.find(xpath, ns)
                if elem is not None and elem.text is not None:
                    return elem.text.strip()
                return default
            except AttributeError:
                return default

        # Debug namespace and structure
        print(f"\nDebug: Using namespace - {ns['ipxact']}")
        
        # Find memory maps directly under component
        memory_maps = root.find('.//ipxact:memoryMaps', ns)
        if memory_maps is None:
            print("Warning: No memoryMaps element found")
            return []
            
        for memory_map in memory_maps.findall('ipxact:memoryMap', ns):
            memory_map_name = safe_get_text(memory_map, 'ipxact:name', 'unnamed_map')
            memory_map_description = safe_get_text(memory_map, 'ipxact:description', '')
            
            # Find address blocks directly under memory map
            for block in memory_map.findall('ipxact:addressBlock', ns):
                block_name = safe_get_text(block, 'ipxact:name', 'unnamed_block')
                block_base = safe_get_text(block, 'ipxact:baseAddress', '0x0')
                block_range = safe_get_text(block, 'ipxact:range', '0x0')
                block_width = safe_get_text(block, 'ipxact:width', '32')
                block_usage = safe_get_text(block, 'ipxact:usage', 'register')
                
                # Find registers directly under address block
                for register in block.findall('ipxact:register', ns):
                    reg_name = safe_get_text(register, 'ipxact:name', 'unnamed_register')
                    reg_description = safe_get_text(register, 'ipxact:description', '')
                    print(f"Debug: Found register - {reg_name} ({reg_description})")
                    
                    # Process fields
                    fields = []
                    fields_elem = register.find('ipxact:fields', ns)
                    if fields_elem is not None:
                        for field in fields_elem.findall('ipxact:field', ns):
                            field_name = safe_get_text(field, 'ipxact:name', 'unnamed_field')
                            field_desc = safe_get_text(field, 'ipxact:description', '')
                            field_reset = safe_get_text(field, './/ipxact:reset/ipxact:value', '0')
                            
                            # Process all child elements of the field in order
                            field_elements = []
                            for child in field:
                                tag = child.tag.split('}')[-1]  # Remove namespace
                                if tag == 'writeValueConstraint':
                                    min_value = safe_get_text(child, 'ipxact:minimum', 'N/A')
                                    max_value = safe_get_text(child, 'ipxact:maximum', 'N/A')
                                    field_elements.append({
                                        'type': 'writeValueConstraint',
                                        'minimum': min_value,
                                        'maximum': max_value
                                    })
                                elif tag == 'modifiedWriteValue':
                                    field_elements.append({
                                        'type': 'modifiedWriteValue',
                                        'value': child.text.strip() if child.text else 'N/A'
                                    })
                                elif tag == 'reset':
                                    reset_value = safe_get_text(child, 'ipxact:value', '0')
                                    field_elements.append({
                                        'type': 'reset',
                                        'value': reset_value
                                    })
                                else:
                                    field_elements.append({
                                        'type': tag,
                                        'value': child.text.strip() if child.text else 'N/A'
                                    })
                            
                            field_info = {
                                'name': field_name,
                                'description': field_desc,
                                'bit_offset': safe_get_text(field, 'ipxact:bitOffset', '0'),
                                'bit_width': safe_get_text(field, 'ipxact:bitWidth', '1'),
                                'access': safe_get_text(field, 'ipxact:access', 'read-write'),
                                'elements': field_elements  # Preserve order of child elements
                            }
                            fields.append(field_info)
                            print(f"Debug: Found field - {field_name} with elements: {field_elements}")
                    
                    hdl_path = safe_get_text(register, './/ipxact:vendorExtensions/ipxact:hdlPath', '')
                    
                    register_info = {
                        'memory_map_name': memory_map_name,
                        'memory_map_description': memory_map_description,
                        'block_name': block_name,
                        'block_base_address': block_base,
                        'block_range': block_range,
                        'block_width': block_width,
                        'block_usage': block_usage,
                        'register_name': reg_name,
                        'register_offset': safe_get_text(register, 'ipxact:addressOffset', '0'),
                        'register_size': safe_get_text(register, 'ipxact:size', '32'),
                        'register_description': reg_description,
                        'register_access': safe_get_text(register, 'ipxact:access', 'read-write'),
                        'register_reset_value': safe_get_text(register, './/ipxact:reset/ipxact:value', '0'),
                        'register_fields': json.dumps(fields),  # Store fields as JSON
                        'register_reset_mask': safe_get_text(register, './/ipxact:reset/ipxact:mask', 'FFFFFFFF'),
                        'hdl_path': hdl_path,
                        'created_date': datetime.now().isoformat()
                    }
                    registers_info.append(register_info)
        
        if not registers_info:
            print("\nWarning: No registers found in the IP-XACT file")
        else:
            print(f"\nFound {len(registers_info)} registers")
            
        return registers_info
    
    except ET.ParseError as e:
        raise ValueError(f"Invalid XML file: {e}")
    except Exception as e:
        raise ValueError(f"Failed to parse register information: {str(e)}")

def create_database(db_path: Path, header_info: Dict[str, str], registers_info: list):
    """Create SQLite database or update existing one with header and register information."""
    try:
        db_exists = db_path.exists()
        conn = sqlite3.connect(db_path)
        cursor = conn.cursor()
        
        create_header_table(cursor)
        create_register_table(cursor)
        
        # Add current timestamp for new records
        header_info['created_date'] = datetime.now().isoformat()
        
        # Handle header information
        if db_exists:
            print(f"\nWARNING: Database '{db_path}' already exists! Checking for duplicate records...")
            
            # Get complete existing record info for comparison
            cursor.execute('''
                SELECT xml_version, xml_encoding, schema_version, vendor, library, name, version, description, created_date 
                FROM ipxact_header 
                WHERE vendor = ? AND library = ? AND name = ? AND version = ?
            ''', (header_info['vendor'], header_info['library'], 
                  header_info['name'], header_info['version']))
            existing = cursor.fetchone()
            
            if existing:
                print(f"\nSkipping: Found existing record - XML v{existing[0]}({existing[1]}), Schema: {existing[2]}, Vendor: {existing[3]}, Lib: {existing[4]}, Name: {existing[5]}, Ver: {existing[6]}, Desc: {existing[7]}, Created: {existing[8]}")
            else:
                print(f"\nInserting: New record - XML v{header_info['xml_version']}({header_info['xml_encoding']}), Schema: {header_info['schema_version']}, Vendor: {header_info['vendor']}, Lib: {header_info['library']}, Name: {header_info['name']}, Ver: {header_info['version']}, Desc: {header_info['description']}, Created: {header_info['created_date']}")
                
                cursor.execute('''
                    INSERT INTO ipxact_header (
                        xml_version, xml_encoding, schema_version, vendor, library, 
                        name, version, description, created_date
                    ) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)
                ''', (
                    header_info['xml_version'],
                    header_info['xml_encoding'],
                    header_info['schema_version'],
                    header_info['vendor'],
                    header_info['library'],
                    header_info['name'],
                    header_info['version'],
                    header_info['description'],
                    header_info['created_date']
                ))
                print("\nNew header information inserted successfully.")
        else:
            print(f"\nCreating new database: {db_path}")
            cursor.execute('''
                INSERT INTO ipxact_header (
                    xml_version, xml_encoding, schema_version, vendor, library, 
                    name, version, description, created_date
                ) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)
            ''', (
                header_info['xml_version'],
                header_info['xml_encoding'],
                header_info['schema_version'],
                header_info['vendor'],
                header_info['library'],
                header_info['name'],
                header_info['version'],
                header_info['description'],
                header_info['created_date']
            ))
        
        # Handle registers information
        print(f"\nProcessing {len(registers_info)} registers...")
        registers_added = 0
        
        for register in registers_info:
            cursor.execute('''
                SELECT COUNT(*) FROM registers 
                WHERE memory_map_name = ? 
                AND block_name = ? 
                AND register_name = ? 
                AND register_offset = ?
            ''', (register['memory_map_name'], register['block_name'],
                 register['register_name'], register['register_offset']))
            
            if cursor.fetchone()[0] == 0:
                cursor.execute('''
                    INSERT INTO registers (
                        memory_map_name, memory_map_description,
                        block_name, block_base_address, block_range, block_width, block_usage,
                        register_name, register_offset, register_size, register_description,
                        register_access, register_reset_value, register_reset_mask,
                        register_fields, hdl_path, created_date
                    ) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
                ''', (
                    register['memory_map_name'],
                    register['memory_map_description'],
                    register['block_name'],
                    register['block_base_address'],
                    register['block_range'],
                    register['block_width'],
                    register['block_usage'],
                    register['register_name'],
                    register['register_offset'],
                    register['register_size'],
                    register['register_description'],
                    register['register_access'],
                    register['register_reset_value'],
                    register['register_reset_mask'],
                    register['register_fields'],
                    register['hdl_path'],
                    register['created_date']
                ))
                registers_added += 1
                print(f"Added register: {register['memory_map_name']}/{register['block_name']}/{register['register_name']} @ {register['register_offset']}")
        
        conn.commit()
        print(f"\nAdded {registers_added} new registers to database")
        return conn
        
    except sqlite3.Error as e:
        raise Exception(f"Database error: {e}")

def record_exists(cursor: sqlite3.Cursor, table: str, record: Dict[str, str]) -> bool:
    """Check if a record with the same key fields exists in the table, ignoring created_date."""
    if table == 'ipxact_header':
        cursor.execute('''
            SELECT COUNT(*) FROM ipxact_header 
            WHERE vendor = ? 
            AND library = ? 
            AND name = ? 
            AND version = ?
            AND xml_version = ?
            AND xml_encoding = ?
            AND schema_version = ?
            AND description = ?
        ''', (record['vendor'], record['library'], 
              record['name'], record['version'],
              record['xml_version'], record['xml_encoding'],
              record['schema_version'], record['description']))
    else:  # registers table
        cursor.execute('''
            SELECT COUNT(*) FROM registers 
            WHERE memory_map_name = ? 
            AND block_name = ? 
            AND register_name = ? 
            AND register_offset = ?
        ''', (record['memory_map_name'], record['block_name'], 
              record['register_name'], record['register_offset']))
    
    return cursor.fetchone()[0] > 0

def main():
    try:
        parser = setup_argument_parser()
        args = parser.parse_args()

        validate_input_file(args.input)
        db_path = get_database_path(args)

        print(f"\nProcessing:")
        print(f"Input XML:     {args.input}")
        print(f"Database path: {db_path}")

        header_info = parse_ipxact_header(args.input)
        registers_info = parse_register_info(args.input)
        conn = create_database(db_path, header_info, registers_info)
        
        print(f"\nSuccessfully processed {len(registers_info)} registers")
        conn.close()

    except FileNotFoundError as e:
        print(f"\nError: {e}", file=sys.stderr)
        sys.exit(1)
    except ValueError as e:
        print(f"\nError: {e}", file=sys.stderr)
        sys.exit(1)
    except Exception as e:
        print(f"\nUnexpected error: {e}", file=sys.stderr)
        sys.exit(1)

if __name__ == "__main__":
    main()