import sqlite3
from typing import List, Tuple, Optional

DEBUG = False  # Set to True to enable debug mode

def connect_to_db(db_path: str) -> sqlite3.Connection:
    """Establish a connection to the SQLite database."""
    return sqlite3.connect(db_path)

def fetch_all_rows(db_path: str, table_name: str) -> List[Tuple]:
    """Fetch all rows from a specified table."""
    with connect_to_db(db_path) as conn:
        cursor = conn.cursor()
        cursor.execute(f"SELECT * FROM {table_name}")
        rows = cursor.fetchall()
        if DEBUG:
            print(f"Fetched {len(rows)} rows from table '{table_name}':")
            for row in rows:
                print(row)
        return rows

def fetch_rows_by_condition(db_path: str, table_name: str, condition: str) -> List[Tuple]:
    """Fetch rows from a table that match a specific condition."""
    with connect_to_db(db_path) as conn:
        cursor = conn.cursor()
        query = f"SELECT * FROM {table_name} WHERE {condition}"
        cursor.execute(query)
        rows = cursor.fetchall()
        if DEBUG:
            print(f"Query: {query}")
            print(f"Fetched {len(rows)} rows matching condition '{condition}':")
            for row in rows:
                print(row)
        return rows

def fetch_single_row(db_path: str, table_name: str, row_id: int) -> Optional[Tuple]:
    """Fetch a single row by its ID."""
    with connect_to_db(db_path) as conn:
        cursor = conn.cursor()
        cursor.execute(f"SELECT * FROM {table_name} WHERE id = ?", (row_id,))
        row = cursor.fetchone()
        if DEBUG:
            print(f"Fetched row with ID {row_id} from table '{table_name}': {row}")
        return row

def count_rows(db_path: str, table_name: str) -> int:
    """Count the total number of rows in a table."""
    with connect_to_db(db_path) as conn:
        cursor = conn.cursor()
        cursor.execute(f"SELECT COUNT(*) FROM {table_name}")
        count = cursor.fetchone()[0]
        if DEBUG:
            print(f"Total rows in table '{table_name}': {count}")
        return count

def get_table_schema(db_path: str, table_name: str) -> List[Tuple]:
    """Retrieve the schema of a table."""
    with connect_to_db(db_path) as conn:
        cursor = conn.cursor()
        cursor.execute(f"PRAGMA table_info({table_name})")
        schema = cursor.fetchall()
        if DEBUG:
            print(f"Schema for table '{table_name}':")
            for column in schema:
                print(f"Column: {column[1]}, Type: {column[2]}")
        return schema

def execute_custom_query(db_path: str, query: str) -> List[Tuple]:
    """Execute a custom SELECT query."""
    with connect_to_db(db_path) as conn:
        cursor = conn.cursor()
        cursor.execute(query)
        rows = cursor.fetchall()
        if DEBUG:
            print(f"Executed query: {query}")
            print(f"Results:")
            for row in rows:
                print(row)
        return rows


# Example usage
if __name__ == "__main__":
    # Replace 'path_to_your_db.sqlite' with the actual path to your SQLite database
    db_path = "path_to_your_db.sqlite"
    table_name = "your_table_name"

    DEBUG = True  # Enable debug mode for demonstration

    print("\nFetching all rows:")
    fetch_all_rows(db_path, table_name)

    print("\nFetching rows by condition:")
    fetch_rows_by_condition(db_path, table_name, "column_name = 'value'")

    print("\nFetching a single row by ID:")
    fetch_single_row(db_path, table_name, 1)

    print("\nCounting rows in the table:")
    count_rows(db_path, table_name)

    print("\nGetting table schema:")
    get_table_schema(db_path, table_name)

    print("\nExecuting a custom query:")
    execute_custom_query(db_path, f"SELECT * FROM {table_name} LIMIT 5")